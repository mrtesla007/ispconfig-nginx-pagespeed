#!/bin/bash
red='\033[0;31m'
green='\033[0;32m'
NC='\033[0m'
HOSTNAME_FQDN=`hostname -f`;

# Variabeln Konfigurieren

	JKV="2.19"  # Jailkit Version fÃ¼r Installation ->  Aktuelle Version: http://olivier.sessink.nl/jailkit/jailkit

	MYSQL_ROOT_USR="root"
	MYSQL_ROOT_PWD="password"
	MYSQL_ROOT_DB="dbispconfig"
	MYSQL_HOST="localhost"

	SSL_COUNTRY_CODE="CH"
	SSL_COUNTRY="Switzerland"
	SSL_CITY="Solothurn"
	SSL_ORG="SpeedWP"
	SSL_ORG_UNIT="Hosting"
	
	ISP_PORT="8080"
	ISP_DB="dbispconfig"
	ISP_USR="ispconfig"

# Update & Installation der Basis Tools

	echo -n "Updating apt and upgrading currently installed packages... "
	echo "deb http://ftp.debian.org/debian jessie-backports main" >> /etc/apt/sources.list
	apt-get -qq update > /dev/null 2>&1
	apt-get -qqy upgrade > /dev/null 2>&1
	echo -e "[${green}DONE${NC}]\n"

	echo "Installation der Basis Tools... "
	apt-get -y install ssh openssh-server php5-cli ufw ntp ntpdate debconf-utils sudo git lsb-release haveged e2fsprogs jessie-backports libssl1.0.0 > /dev/null 2>&1
	echo "dash dash/sh boolean false" | debconf-set-selections
	dpkg-reconfigure -f noninteractive dash > /dev/null 2>&1
	echo -n "Konfiguriere Dash... "
	echo -e "[${green}DONE${NC}]\n"

# Installation MariaDB
	
	echo -n "Installing MariaDB... "
	apt-get install software-properties-common
	apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 0xcbcb082a1bb943db
	add-apt-repository 'deb [arch=amd64,i386,ppc64el] http://mirror.klaus-uwe.me/mariadb/repo/10.2/debian jessie main'
	echo "deb-src http://mirror.klaus-uwe.me/mariadb/repo/10.2/debian jessie main" >> /etc/apt/sources.list
	apt-get -y update

    echo "mysql-server-5.5 mysql-server/MYSQL_ROOT_USR_password password $MYSQL_ROOT_PWD" | debconf-set-selections
    echo "mysql-server-5.5 mysql-server/MYSQL_ROOT_USR_password_again password $MYSQL_ROOT_PWD" | debconf-set-selections
    apt-get -y install mariadb-client mariadb-server > /dev/null 2>&1
    sed -i 's/bind-address		= 127.0.0.1/#bind-address		= 127.0.0.1/' /etc/mysql/my.cnf
    service mysql restart > /dev/null 2>&1
    echo -e "[${green}DONE${NC}]\n"
	
	cat > /etc/mysql/my.cnf <<END
	# Generated by Percona Configuration Wizard (http://tools.percona.com/) version REL5-20120208
	 
	[mysql]
	 
	# CLIENT #
	port                           = 3306
	socket                         = /var/run/mysqld/mysqld.sock
	 
	[mysqld]
	 
	# GENERAL #
	user                           = mysql
	default-storage-engine         = InnoDB
	socket                         = /var/run/mysqld/mysqld.sock
	pid-file                       = /var/run/mysqld/mysqld.pid
	tmpdir                         = /tmp
	 
	# MyISAM #
	key-buffer-size                = 32M
	myisam-recover                 = FORCE,BACKUP
	 
	# SAFETY #
	max-allowed-packet             = 16M
	max-connect-errors             = 1000000
	skip-name-resolve
	sysdate-is-now                 = 1
	innodb                         = FORCE
	innodb-strict-mode             = 1
	 
	sql-mode="NO_ENGINE_SUBSTITUTION"
	# DATA STORAGE #
	datadir                        = /var/lib/mysql
	 
	# CACHES AND LIMITS #
	tmp-table-size                 = 16M
	max-heap-table-size            = 16M
	query-cache-type               = 1
	query-cache-size               = 16M
	max-connections                = 300
	thread-cache-size              = 50
	open-files-limit               = 65535
	table-definition-cache         = 1024
	table-open-cache               = 2048
	 
	# INNODB #
	innodb-flush-method            = O_DIRECT
	innodb-log-files-in-group      = 2
	innodb-log-file-size           = 128M
	innodb-flush-log-at-trx-commit = 2
	innodb-file-per-table          = 1
	innodb-buffer-pool-size        = 128M
	innodb_fast_shutdown           = 0
	 
	# LOGGING #
	log-error                      = /var/log/mysql/mysql-error.log
	log-queries-not-using-indexes  = 0
	slow-query-log                 = 1
	slow-query-log-file            = /var/log/mysql/mysql-slow.log
	 
	# REDUCE MEMORY USAGE #
	performance_schema             = 0
END
	/etc/init.d/mysql restart
	
# Installation NGINX Extras mit PageSpeed & HTTP/2
	
	service apache2 stop
	update-rc.d -f apache2 remove
	wget https://www.dotdeb.org/dotdeb.gpg
    apt-key add dotdeb.gpg
	echo "deb http://packages.dotdeb.org jessie-nginx-http2 all" >> /etc/apt/sources.list
    echo "deb-src http://packages.dotdeb.org jessie-nginx-http2 all" >> /etc/apt/sources.list
    apt-get -y update
	echo -n "Installation NGINX Extras mit PageSpeed & HTTP/2... "	
	apt-get -yqq install nginx-extras > /dev/null 2>&1
	service nginx start
    echo -e "[${green}DONE${NC}]\n"

# Function:	Installation PHP 7.0
	
	echo -n "Installation von PHP 7.0 "
	apt-get install apt-transport-https lsb-release ca-certificates
	wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
	echo "deb https://packages.sury.org/php/ jessie main" > /etc/apt/sources.list
	apt-get update
	apt-get install -y php7.0 php7.0-cli php7.0-cgi php7.0-fpm php-apcu php-apcu-bc php-memcache php-memcached && service php7.0-fpm restart

# Function:	Installing phpMyAdmin
	
	echo -n "Installing phpMyAdmin... "
	apt-get -y install phpmyadmin
	echo -e "[${green}DONE${NC}]\n"
	
# Function:	Installing Lets Encrypt
	
  	echo -n "Installing Lets Encrypt... "	
	apt-get -yqq install certbot -t jessie-backports
	certbot &
	echo -e "[${green}DONE${NC}]\n"
	
# Function: Install HHVM	
	
    echo -e "Installing HHVM"
    apt-get install -y apt-transport-https software-properties-common
    apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xB4112585D386EB94
    add-apt-repository https://dl.hhvm.com/debian
    apt-get update
    apt-get install -y hhvm	
	
# Function: Install Quota

	echo -n "Installing and initializing Quota (this might take while)... "
	apt-get -qqy install quota quotatool > /dev/null 2>&1
	if ! [ -f /proc/user_beancounters ]; then
	  if [ `cat /etc/fstab | grep ',usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=vfsv0' | wc -l` -eq 0 ]; then
		sed -i '/tmpfs/!s/errors=remount-ro/errors=remount-ro,usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=vfsv0/' /etc/fstab
	if [ `cat /etc/fstab | grep 'defaults' | wc -l` -ne 0 ]; then
		sed -i '/tmpfs/!s/defaults/defaults,usrjquota=aquota.user,grpjquota=aquota.group,jqfmt=vfsv0/' /etc/fstab
	mount -o remount /
	quotacheck -avugm > /dev/null 2>&1
	quotaon -avug > /dev/null 2>&1
	echo -e "[${green}DONE${NC}]\n"	
  
# Function: Install WebStats 

	echo -n "Installing stats... ";
	apt-get -y install vlogger webalizer awstats geoip-database libclass-dbi-mysql-perl > /dev/null 2>&1
	sed -i 's/^/#/' /etc/cron.d/awstats
	echo -e "[${green}DONE${NC}]\n"
	
# Function: Install Jailkit

	echo -n "Installing Jailkit... "
	apt-get -y install build-essential autoconf automake libtool flex bison debhelper binutils > /dev/null 2>&1
	cd /tmp
	wget -q http://olivier.sessink.nl/jailkit/jailkit-$JKV.tar.gz
	tar xfz jailkit-$JKV.tar.gz
	cd jailkit-$JKV
	./debian/rules binary > /dev/null 2>&1
	cd ..
	dpkg -i jailkit_$JKV-1_*.deb > /dev/null 2>&1
	rm -rf jailkit-$JKV
	echo -e "[${green}DONE${NC}]\n"	

# Function: Install Fail2ban

	echo -n "Installing fail2ban... "
	apt-get -y install fail2ban > /dev/null 2>&1

	service fail2ban restart > /dev/null 2>&1
	echo -e "[${green}DONE${NC}]\n"

# Function: Install ISPConfig

	echo "Installing ISPConfig3... "
	cd /tmp
	wget http://www.ispconfig.org/downloads/ISPConfig-3-stable.tar.gz
	tar xfz ISPConfig-3-stable.tar.gz
	cd ispconfig3_install/install/
	echo "Create INI file"
	touch autoinstall.ini
	echo "[install]" > autoinstall.ini
	echo "language=de" >> autoinstall.ini
	echo "install_mode=expert" >> autoinstall.ini
	echo "hostname=$HOSTNAME_FQDN" >> autoinstall.ini
	echo "mysql_hostname=MYSQL_HOST" >> autoinstall.ini
	echo "mysql_MYSQL_ROOT_USR_user=MYSQL_ROOT_USR" >> autoinstall.ini
	echo "mysql_MYSQL_ROOT_USR_password=$MYSQL_ROOT_PWD" >> autoinstall.ini
	echo "mysql_database=$MYSQL_ROOT_DB" >> autoinstall.ini
	echo "mysql_port=3306" >> autoinstall.ini
	echo "mysql_charset=utf8" >> autoinstall.ini
	echo "http_server=nginx" >> autoinstall.ini
	echo "ispconfig_port=$ISP_PORT" >> autoinstall.ini
	echo "ispconfig_use_ssl=yes" >> autoinstall.ini
	echo
	echo "[ssl_cert]" >> autoinstall.ini
	echo "ssl_cert_country=$SSL_COUNTRY_CODE" >> autoinstall.ini
	echo "ssl_cert_state=$SSL_COUNTRY" >> autoinstall.ini
	echo "ssl_cert_locality=$SSL_CITY" >> autoinstall.ini
	echo "ssl_cert_organisation=$SSL_ORG" >> autoinstall.ini
	echo "ssl_cert_organisation_unit=$SSL_UNIT" >> autoinstall.ini
	echo "ssl_cert_common_name=$HOSTNAME_FQDN" >> autoinstall.ini
	echo
	echo "[expert]" >> autoinstall.ini
	echo "mysql_ispconfig_user=ISP_USR" >> autoinstall.ini
	echo "mysql_ispconfig_password=MYSQL_ROOT_PWD" >> autoinstall.ini
	echo "join_multiserver_setup=no" >> autoinstall.ini
	echo "mysql_master_hostname=MYSQL_HOST" >> autoinstall.ini
	echo "mysql_master_MYSQL_ROOT_USR_user=MYSQL_ROOT_USR" >> autoinstall.ini
	echo "mysql_master_MYSQL_ROOT_USR_password=$MYSQL_ROOT_PWD" >> autoinstall.ini
	echo "mysql_master_database=ISP_DB" >> autoinstall.ini
	echo "configure_mail=no" >> autoinstall.ini
	echo "configure_jailkit=yes" >> autoinstall.ini
	echo "configure_nginx=yes" >> autoinstall.ini
	echo "configure_firewall=yes" >> autoinstall.ini
	echo "install_ispconfig_web_interface=yes" >> autoinstall.ini
	echo
	echo "[update]" >> autoinstall.ini
	echo "do_backup=yes" >> autoinstall.ini
	echo "mysql_MYSQL_ROOT_USR_password=$MYSQL_ROOT_PWD" >> autoinstall.ini
	echo "mysql_master_hostname=MYSQL_HOST" >> autoinstall.ini
	echo "mysql_master_MYSQL_ROOT_USR_user=MYSQL_ROOT_USR" >> autoinstall.ini
	echo "mysql_master_MYSQL_ROOT_USR_password=$MYSQL_ROOT_PWD" >> autoinstall.ini
	echo "mysql_master_database=$ISP_DB" >> autoinstall.ini
	echo "reconfigure_permissions_in_master_database=yes" >> autoinstall.ini
	echo "reconfigure_services=yes" >> autoinstall.ini
	echo "ispconfig_port=$ISP_PORT" >> autoinstall.ini
	echo "create_new_ispconfig_ssl_cert=no" >> autoinstall.ini
	echo "reconfigure_crontab=yes" >> autoinstall.ini
	echo | php -q install.php --autoinstall=autoinstall.ini
	php -q install.php
	/etc/init.d/nginx restart

	echo -e "[${green}DONE${NC}]\n"
	
	apt-get install -y php5.6 php5.6-cli php5.6-cgi php5.6-fpm php-apcu php-apcu-bc php-memcache php-memcached php-xdebug && /etc/init.d/php5.6-fpm restart	
	apt-get install -y php7.1 php7.1-cli php7.1-cgi php7.1-fpm php-apcu php-apcu-bc php-memcache php-memcached php-xdebug && /etc/init.d/ervice php7.1-fpm restart
	apt-get install -y php7.2 php7.2-cli php7.2-cgi php7.2-fpm php-apcu php-apcu-bc php-memcache php-memcached php-xdebug && /etc/init.d/php7.2-fpm restart
	
	cp /etc/php/7.0/fpm/php.ini /etc/php/7.0/fpm/php.ini.BACK
	sed -i 's/max_execution_time = 30/max_execution_time = 120/' /etc/php/7.0/fpm/php.ini
	sed -i 's/; max_input_vars = 1000/max_input_vars = 3000/' /etc/php/7.0/fpm/php.ini
	sed -i 's/memory_limit = 128M/memory_limit = 96M/' /etc/php/7.0/fpm/php.ini
	sed -i 's/max_input_time = 60/max_input_time = 120/' /etc/php/7.0/fpm/php.ini
	sed -i 's/post_max_size = 8M/post_max_size = 50M/' /etc/php/7.0/fpm/php.ini
	sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 50M/' /etc/php/7.0/fpm/php.ini
	sed -i 's/expose_php = On/expose_php = Off/' /etc/php/7.0/fpm/php.ini
	sed -i 's/;realpath_cache_size = 16k/realpath_cache_size = 512k/' /etc/php/7.0/fpm/php.ini
	sed -i 's/;realpath_cache_ttl = 120/realpath_cache_ttl = 86400/' /etc/php/7.0/fpm/php.ini
	sed -i 's/short_open_tag = Off/short_open_tag = On/' /etc/php/7.0/fpm/php.ini
	sed -i 's/session.gc_maxlifetime = 1440/session.gc_maxlifetime = 86400/' /etc/php/7.0/fpm/php.ini
	sed -i 's/;date.timezone =/date.timezone = Europe/Zurich/' /etc/php/7.0/fpm/php.ini
	sed -i 's/^;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php/7.0/fpm/php.ini

	cp /etc/php/7.0/fpm/pool.d/www.conf /etc/php/7.0/fpm/pool.d/www.conf.BACK
	sed -i 's/;catch_workers_output = yes/catch_workers_output = yes/' /etc/php/7.0/fpm/pool.d/www.conf
	sed -i 's/;request_terminate_timeout = 0/request_terminate_timeout = 120s/' /etc/php/7.0/fpm/pool.d/www.conf
	sed -i 's/;rlimit_files = 1024/rlimit_files = 200000/' /etc/php/7.0/fpm/pool.d/www.conf
	sed -i 's/;rlimit_core = 0/rlimit_core = unlimited/' /etc/php/7.0/fpm/pool.d/www.conf
	#sed -i 's/;slowlog = log/$pool.log.slow/slowlog = /var/log/slowlog-site.log/' /etc/php/7.0/fpm/pool.d/www.conf
	#sed -i 's/;request_slowlog_timeout = 0/request_slowlog_timeout = 5s/' /etc/php/7.0/fpm/pool.d/www.conf
	#sed -i 's/;pm.status_path = /status/pm.status_path = /status/' /etc/php/7.0/fpm/pool.d/www.conf

	sed -i 's/;listen.backlog = 65535/listen.backlog = -1/' /etc/php/7.0/fpm/pool.d/www.conf
	sed -i 's/;emergency_restart_threshold = 0/emergency_restart_threshold = 10/' /etc/php/7.0/fpm/php-fpm.conf
	sed -i 's/;emergency_restart_interval = 0/emergency_restart_interval = 1m/' /etc/php/7.0/fpm/php-fpm.conf
	sed -i 's/;process_control_timeout = 0/process_control_timeout = 10s/' /etc/php/7.0/fpm/php-fpm.conf
	/etc/init.d/php7.0-fpm restart
	ulimit -n 500000
	echo 'fastcgi_param HTTP_PROXY "";' >> /etc/nginx/fastcgi_params
	echo -e "[${green}DONE${NC}]\n"
	
	echo -e "${green}Well done ISPConfig installed and configured correctly :D ${NC}"
	echo "Now you can connect to your ISPConfig installation at https://$HOSTNAME_FQDN:$ISP_PORT or https://IP_ADDRESS:$ISP_PORT"
	echo "phpMyAdmin is accessibile at  http://$HOSTNAME_FQDN:8081/phpmyadmin or http://IP_ADDRESS:8081/phpmyadmin";
	
	
